<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Peng Yan</title>
    <link>https://ryanfakir.github.io/blog/index.xml</link>
    <description>Recent content in Blog on Peng Yan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 03 Jan 2017 23:06:23 -0500</lastBuildDate>
    <atom:link href="https://ryanfakir.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Practice Go: Testing</title>
      <link>https://ryanfakir.github.io/practice-go-testing/</link>
      <pubDate>Tue, 03 Jan 2017 23:06:23 -0500</pubDate>
      
      <guid>https://ryanfakir.github.io/practice-go-testing/</guid>
      <description>

&lt;h4 id=&#34;task-create-basic-test-case-and-benchmark-test-with-go&#34;&gt;Task: create basic test case and benchmark test with go&lt;/h4&gt;

&lt;p&gt;bitcount_test.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func TestLookup(t *testing.T) {
	var tests = []struct {
		testInt uint64
		result  int
	}{
		{1213164123131294294, 30},
		{65, 2},
		{16, 1},
		{11, 3},
	}
	for _, testcase := range tests {
		if ok := LookupImprove(testcase.testInt); ok != testcase.result {
			t.Errorf(&amp;quot;Return wrong result (%b), expect %d but got %d&amp;quot;, testcase.testInt, testcase.result, ok)
		}
	}
}

var test uint64

func BenchmarkLookup(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Lookup(test)
	}
}

func BenchmarkLookupImprove(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		LookupImprove(test)
	}
}

func BenchmarkAll(b *testing.B) {
	seed := time.Now().UTC().UnixNano()
	random := rand.New(rand.NewSource(seed))
	test = uint64(random.Int63())
	b.Run(&amp;quot;lookup&amp;quot;, BenchmarkLookup)
	b.Run(&amp;quot;lookupImprove&amp;quot;, BenchmarkLookupImprove)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bitcount.go&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;var table [256]byte

func init() {
	for i := range table {
		table[i] = table[i/2] + byte(i&amp;amp;1)
	}
}

func Lookup(v uint64) (sum int) {
	for i := 0; i &amp;lt; 8; i++ {
		sum += int(table[byte(v&amp;gt;&amp;gt;uint(i*8))])
	}
	return
}

func LookupImprove(v uint64) (sum int) {
	if v == 0 {
		return sum
	}
	sum = 1
	for v&amp;amp;(v-1) != 0 {
		v = v &amp;amp; (v - 1)
		sum++
	}
	return
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Practice Go: Cache Client</title>
      <link>https://ryanfakir.github.io/practice-go-cache-client/</link>
      <pubDate>Mon, 02 Jan 2017 20:37:42 -0500</pubDate>
      
      <guid>https://ryanfakir.github.io/practice-go-cache-client/</guid>
      <description>

&lt;h4 id=&#34;task-cache-client-with-go&#34;&gt;Task: cache client with go&lt;/h4&gt;

&lt;p&gt;Since go is design for easy compose concurrency-safe code. There are some ways to adopt it.&lt;br /&gt;
To make client concurrency-safe, need to use lock without harming too much efficiency.&lt;br /&gt;
By using Context, we allow client call able to timeout safe without leaking goroutine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func (c *Client) Call(ctx context.Context, key string) (value interface{}, err error) {
	c.Lock()
	e := c.cache[key]
	if e == nil {
		e = &amp;amp;CStruct{key, make(chan struct{}), nil}
		c.cache[key] = e
		c.Unlock()
		e.result = c.flist(key)
		close(e.ready)
	} else {
		c.Unlock()
	}
	select {
	case &amp;lt;-ctx.Done():
		return nil, ctx.Err()
	case &amp;lt;-e.ready:
		return e.result, nil
	}
}

type CStruct struct {
	key    string
	ready  chan struct{}
	result interface{}
}

type Client struct {
	cache map[string]*CStruct
	sync.Mutex
	flist func(key string) interface{}
}

type Config struct {
	Function func(key string) interface{}
}

func New(config ...Config) (*Client, error) {
	// option config
	c := &amp;amp;Client{cache: make(map[string]*CStruct)}
	c.flist = config[0].Function
	return c, nil
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Practice Go: Disk Calculation</title>
      <link>https://ryanfakir.github.io/practice-go-disk-calculation/</link>
      <pubDate>Wed, 28 Dec 2016 21:47:20 -0500</pubDate>
      
      <guid>https://ryanfakir.github.io/practice-go-disk-calculation/</guid>
      <description>

&lt;h4 id=&#34;task-create-disk-calculation-with-go&#34;&gt;Task: create disk calculation with go&lt;/h4&gt;

&lt;p&gt;to cancel long-wait goroutine, &lt;a href=&#34;https://golang.org/pkg/context/&#34;&gt;context&lt;/a&gt; package provide really nice abstraction.&lt;br /&gt;
Here is code using context to cancel loopDir, so in client side, we don&amp;rsquo;t need worry about goroutine leak.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Golang&#34;&gt;var tokens = make(chan struct{}, 20)
var done = make(chan struct{})

const (
	interval = 500
	timeout  = 1300
)

func main() {
	flag.Parse()
	start := time.Now()
	foldername := flag.Args()
	// create ctx with timeout
	ctx, cancel := context.WithTimeout(context.Background(), timeout*time.Millisecond)
	defer cancel()
	out := make(chan int64)
	wg := &amp;amp;sync.WaitGroup{}
	tick := time.Tick(interval * time.Millisecond)
	wg.Add(1)
	go func() {
		for _, name := range foldername {
			go loopDir(ctx, name, out, wg)
		}
	}()
	go func() {
		wg.Wait()
		close(out)
	}()

	go func() {
		os.Stdin.Read(make([]byte, 1))
		close(done)
	}()

	var fileNumber, nByte int64
	for {
		select {
		case &amp;lt;-done:
			// when user hit key, exit the program
			for range out {
			}
			return
		case size, ok := &amp;lt;-out:
			if !ok {
				fmt.Printf(&amp;quot;time.Since(start) = %+v\n&amp;quot;, time.Since(start))
				panic(&amp;quot;show me&amp;quot;)
				print(fileNumber, nByte)
				return
			}
			fileNumber++
			nByte += size
		case &amp;lt;-tick:
			print(fileNumber, nByte)
		}
	}
}

func print(fileNumber, nByte int64) {
	fmt.Printf(&amp;quot;count %d files, total size: %.1f KB\n&amp;quot;, fileNumber, float64(nByte)/1e3)
}

func loopDir(ctx context.Context, foldername string, out chan&amp;lt;- int64, wg *sync.WaitGroup) {
	defer wg.Done()
	select {
	case &amp;lt;-ctx.Done():
	    //ctx will cancel after timeout
		return
	default:
		for _, v := range spanDir(foldername) {
			if v.IsDir() {
				subDir := filepath.Join(foldername, v.Name())
				tokens &amp;lt;- struct{}{}
				wg.Add(1)
				go loopDir(ctx, subDir, out, wg)
				&amp;lt;-tokens
			} else {
				out &amp;lt;- v.Size()
			}
		}
	}
}

func spanDir(foldername string) []os.FileInfo {
	subFolder, err := ioutil.ReadDir(foldername)
	if err != nil {
		fmt.Fprintf(os.Stderr, &amp;quot;Reading folder with error: %v\n&amp;quot;, err)
		return nil
	}
	return subFolder
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Golang&#34;&gt;var tokens = make(chan struct{}, 20)
var done = make(chan struct{})

const (
	interval = 500
)

func main() {
	flag.Parse()
	foldername := flag.Args()
	out := make(chan int64)
	wg := &amp;amp;sync.WaitGroup{}
	tick := time.Tick(interval * time.Millisecond)
	wg.Add(1)
	go func() {
		for _, name := range foldername {
			go loopDir(name, out, wg)
		}
	}()
	go func() {
		wg.Wait()
		close(out)
	}()

	go func() {
		os.Stdin.Read(make([]byte, 1))
		close(done)
	}()

	var fileNumber, nByte int64
	for {
		select {
		case &amp;lt;-done:
			for range out {
			}
			return
		case size, ok := &amp;lt;-out:
			if !ok {
				print(fileNumber, nByte)
				return
			}
			fileNumber++
			nByte += size
		case &amp;lt;-tick:
			print(fileNumber, nByte)
		}
	}
}

func print(fileNumber, nByte int64) {
	fmt.Printf(&amp;quot;count %d files, total size: %.1f KB\n&amp;quot;, fileNumber, float64(nByte)/1e3)

}

func cancel() bool {
	select {
	case &amp;lt;-done:
		return true
	default:
		return false
	}
}

func loopDir(foldername string, out chan&amp;lt;- int64, wg *sync.WaitGroup) {
	defer wg.Done()
	if cancel() {
		return
	}
	for _, v := range spanDir(foldername) {
		if v.IsDir() {
			subDir := filepath.Join(foldername, v.Name())
			tokens &amp;lt;- struct{}{}
			wg.Add(1)
			go loopDir(subDir, out, wg)
			&amp;lt;-tokens
		} else {
			out &amp;lt;- v.Size()
		}
	}
}

func spanDir(foldername string) []os.FileInfo {
	if cancel() {
		return nil
	}
	subFolder, err := ioutil.ReadDir(foldername)
	if err != nil {
		fmt.Fprintf(os.Stderr, &amp;quot;Reading folder with error: %v\n&amp;quot;, err)
		return nil
	}
	return subFolder
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Practice Go: Web Crawler</title>
      <link>https://ryanfakir.github.io/practice-go-web-crawler/</link>
      <pubDate>Sat, 24 Dec 2016 18:37:06 -0500</pubDate>
      
      <guid>https://ryanfakir.github.io/practice-go-web-crawler/</guid>
      <description>

&lt;h4 id=&#34;task-web-crawler-with-go&#34;&gt;Task: web crawler with go&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://forum.golangbridge.org/t/question-about-goroutine/4168/6&#34;&gt;Here&lt;/a&gt; is link I try to ask for help from community, Luckily Golang community have tons of terrific people to help.&lt;/p&gt;

&lt;p&gt;As we can see, to make goroutine is safely quit is tricky, and final version is still error-prone.&lt;br /&gt;
In next section, will take look at &lt;a href=&#34;https://golang.org/pkg/context/&#34;&gt;context&lt;/a&gt; to writing easy code w/o much thinking.&lt;/p&gt;

&lt;h3 id=&#34;main-go-final-version-with-less-goroutine-generated-less-time-consume&#34;&gt;main.go: Final version: with less goroutine generated, less time consume&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Golang&#34;&gt;func main() {
	start := time.Now()
	c := utility.New()
	c.ParsingPath = &amp;quot;https://ryanfakir.github.io&amp;quot;
	linkList := make(chan Links)
	out := make(chan Links)
	depth := 3
	wg := &amp;amp;sync.WaitGroup{}
	wg.Add(1)
	go func() {
		linkList &amp;lt;- Links{1, c.ParsingPath}
	}()
	for i := 0; i &amp;lt; 2; i++ {
		go func() {
			for v := range linkList {
				fmt.Printf(&amp;quot; runtime.NumGoroutine()= %+v\n&amp;quot;, runtime.NumGoroutine())
				if v.Level &amp;gt;= depth {
					// resolve work 
					wg.Done()
					continue
				}
				res := c.Parser(v.Link)
				go func(v Links, res []string) {
					// resolve work for previous-round link
					defer wg.Done()
					for _, item := range res {
						out &amp;lt;- Links{v.Level + 1, item}
					}
				}(v, res)
			}
		}()
	}

	go func() {
		// wait all work done and quit job
		wg.Wait()
		close(linkList)
		close(out)
	}()
	m := make(map[string]bool)
	for link := range out {
		if !m[link.Link] &amp;amp;&amp;amp; link.Level &amp;lt;= depth {
			fmt.Printf(&amp;quot;time.Since(start) = %+v\n&amp;quot;, time.Since(start))
			// How many link been processed
			// Next-around links need to be registered in wg
			wg.Add(1)
			m[link.Link] = true
			linkList &amp;lt;- link
		}
	}
	fmt.Println(&amp;quot;done&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;second-way-to-go-unluckily-not-figure-out-right-way-to-quit&#34;&gt;Second way to go unluckily not figure out right way to quit&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Golang&#34;&gt;func main() {
	start := time.Now()
	c := utility.New()
	c.ParsingPath = &amp;quot;https://ryanfakir.github.io&amp;quot;
	linkList := make(chan Links)
	out := make(chan Links)
	depth := 3
	go func() {
		// start first link
		linkList &amp;lt;- Links{1, c.ParsingPath}
		tokens &amp;lt;- struct{}{}
	}()
	var res []Links
	for i := 0; i &amp;lt; 2; i++ {
		go func() {
			for v := range linkList {
				fmt.Printf(&amp;quot; runtime.NumGoroutine()= %+v\n&amp;quot;, runtime.NumGoroutine())
				if v.Level &amp;gt;= depth {
					continue
				}
				select {
				case &amp;lt;-tokens:
					// append untouch urls from res
					var items []Links
					for _, unTouchedLinks := range res {
						for _, url := range c.Parser(unTouchedLinks.Link) {
							items = append(items, Links{unTouchedLinks.Level + 1, url})
						}
					}
					for _, url := range c.Parser(v.Link) {
						items = append(items, Links{v.Level + 1, url})
					}
					res = append(res, items...)
					// go func(v Links, res []string) {
					for _, item := range res {
						out &amp;lt;- item
					}
				default:
					res = append(res, v)
				}
				//}(v, res)
			}
		}()
	}

	m := make(map[string]bool)
	var i int
	for link := range out {
		if !m[link.Link] &amp;amp;&amp;amp; link.Level &amp;lt;= depth {
			i++
			fmt.Printf(&amp;quot;time.Since(start) = %+v\n&amp;quot;, time.Since(start))
			fmt.Printf(&amp;quot;i = %+v\n&amp;quot;, i)
			m[link.Link] = true
			go func() {
				tokens &amp;lt;- struct{}{}
				linkList &amp;lt;- link
			}()

		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;utility-go&#34;&gt;utility.go&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-Golang&#34;&gt;var fvalue = DepthFlag{3}

type Client struct {
	Url         *url.URL
	Fvalue      *DepthFlag
	ParsingPath string
}

func New() *Client {
	return &amp;amp;Client{}
}
func (c *Client) Parser(url string) []string {
	resp, err := http.Get(url)
	if err != nil {
		fmt.Errorf(&amp;quot;http get %s with error %v&amp;quot;, url, err)
		return nil
	}
	if resp.StatusCode != http.StatusOK {
		fmt.Errorf(&amp;quot;http get status not OK: %s with %v&amp;quot;, url, err)
		return nil
	}
	defer resp.Body.Close()
	doc, err := html.Parse(resp.Body)
	if err != nil {
		fmt.Errorf(&amp;quot;parse problem %s with error %v&amp;quot;, url, err)
		return nil
	}
	c.Url = resp.Request.URL
	pre := c.findLink
	res := removeDuplicate(forEachNode(doc, pre, nil), url)
	return res
}

func removeDuplicate(elements []string, url string) (res []string) {
	m := make(map[string]bool)
	for _, v := range elements {
		v = strings.TrimSuffix(v, &amp;quot;/&amp;quot;)
		m[v] = true
	}
	for k, _ := range m {
		if url != k {
			res = append(res, k)
		}
	}
	return
}

type DepthFlag struct {
	Value int
}

func (d *DepthFlag) String() string {
	return strconv.Itoa(d.Value)
}
func (d *DepthFlag) Set(s string) error {
	var value int
	_, err := fmt.Sscanf(s, &amp;quot;%d&amp;quot;, &amp;amp;value)
	if err != nil {
		fmt.Errorf(&amp;quot;problem with flag %s&amp;quot;, s)
		return err
	}
	d.Value = value
	return nil
}
func init() {
	flag.Var(&amp;amp;fvalue, &amp;quot;depth&amp;quot;, &amp;quot;Depth Parameter&amp;quot;)
}

func (c *Client) findLink(n *html.Node) (res []string) {
	if n.Type == html.ElementNode &amp;amp;&amp;amp; n.Data == &amp;quot;a&amp;quot; {
		for _, v := range n.Attr {
			if v.Key != &amp;quot;href&amp;quot; {
				continue
			}
			temp, err := c.Url.Parse(v.Val)
			if err != nil {
				continue
			}
			res = append(res, temp.String())
		}
	}
	return
}
func forEachNode(n *html.Node, pre, post func(n *html.Node) []string) (res []string) {
	if pre != nil {
		res = append(res, pre(n)...)
	}
	for c := n.FirstChild; c != nil; c = c.NextSibling {
		res = append(res, forEachNode(c, pre, post)...)
	}
	if post != nil {
		res = append(res, post(n)...)
	}
	return
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular Checkbox</title>
      <link>https://ryanfakir.github.io/angular-checkbox/</link>
      <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ryanfakir.github.io/angular-checkbox/</guid>
      <description>

&lt;p&gt;If we need make some directives like widgets — meaning drag and use, how to we want to design it, let’s practice from ground.&lt;br /&gt;
Right now we have&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&amp;quot;action&amp;quot; type=&amp;quot;checkbox&amp;quot;&amp;gt;  
&amp;lt;label for=&amp;quot;action&amp;quot;&amp;gt;Action will triggerlabel&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;case-1&#34;&gt;Case 1&lt;/h3&gt;

&lt;p&gt;When I check the checkbox, I want to fire event which will call backend service.&lt;br /&gt;
You may want to code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;@Directive({
  selector: &#39;input[action]&#39;,
  events: [&#39;callBackend&#39;],
  host: {
    &#39;(change)&#39;: &#39;emitOut()&#39;
  }

})
export class CheckboxTriggerActionDirective {
  callBackend: EventEmitter&amp;lt;any&amp;gt; = new EventEmitter();

  emitOut() {
    this.callBackend.emit(&#39;checkbox emit data out side&#39;);
  }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you put directive like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; ||         ||  
 \/         \/  
&amp;lt;input id=&amp;quot;action&amp;quot; type=&amp;quot;checkbox&amp;quot; action (callBackend)=&amp;quot;callbackend($event)&amp;quot;&amp;gt;  
&amp;lt;label for=&amp;quot;action&amp;quot;&amp;gt;Action will triggerlabel&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s talk basic angular2 important knowledge real quick:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Angular2 have two main decorators (@Directive and @Component), or you can understand as Annotation if you are Java Guy, which put the metadata(additional informative data) above class definition, to let Angular2 compiler to know when and where to apply the functionality you are defined.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can briefly take @Component = @Directive + Template.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;In Angular2 Data flow is one way, always from Component class instance member(Ex. callBackend is instance member of class CheckboxTriggerActionDirective) to template.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;In our example,&lt;br /&gt;
[selector] will ask angular to parse template to find tag input which have attribute “action”.&lt;br /&gt;
[events] which tell angular this directive will have customize-event which in our application somewhere it can be listen to or subscribe to.&lt;br /&gt;
[host] means the DOM element which hosts our directive, in our case is input, it means when we hear some change events happened from host element, our directive will call function emitOut().&lt;br /&gt;
Remember (xxx) means output from DOM element, it can be built-in event or customize function call. In emitOut() our customized event will shout out, our application can listen to the value or message it sends(this message can be object or internal usefully information which can let whole world know you LOL), and do some action(EX. call backend service).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;data-flow&#34;&gt;Data flow:&lt;/h3&gt;

&lt;p&gt;checkbox status changed ——&amp;gt; call emitOut() ——&amp;gt; callBackend emit message ——&amp;gt; observer or listener will do operations&lt;/p&gt;

&lt;p&gt;Next we will make our checkbox more generic and reusable.&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>